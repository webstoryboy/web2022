[
    {
        "question": "GoF(Gang of Four)의 디자인 패턴에서 행위 패턴에 속하는 것은?",
        "correct_answer": "Visitor",
        "incorrect_answers": [
            "Builder",
            "Prototype",
            "Bridge"
        ]
    },
    {
        "question": "객체지향 프로그램에서 데이터를 추상화하는 단위는?",
        "correct_answer": "클래스",
        "incorrect_answers": [
            "메소드",
            "상속성",
            "메시지"
        ] 
    },
    {
        "question": "객체지향 기법에서 클래스들 사이의 '부분-전체(part-shole)' 관계 또는 '부분(is-a-part-of)'의 관계로 설명되는 연관성을 나태나는 용어는?",
        "correct_answer": "집단화",
        "incorrect_answers": [
            "일반화",
            "추상화",
            "캡슐화"
        ]
    },
    {
        "question": "객체지향 분석 방법론 중 E-R 다이어그램을 사용하여 객체의 행위를 모델링하여, 객체 식별, 구조 식별, 주체 정의, 속성 및 관계 정의, 서비스 정의 등의 과정으로 구성되는 것은?",
        "correct_answer": "Coad와 Yourdon 방법",
        "incorrect_answers": [
            "Booch 방법",
            "Jacobson 방법",
            "Wirfs-Brocks 방법"
        ]
    },
    {
        "question": "코드 설계에서 일정한 일련번호를 부여하는 방식의 코드는?",
        "correct_answer": "순차 코드",
        "incorrect_answers": [
            "연상 코드",
            "블록 코드",
            "표의 숫자 코드"
        ]
    },
    {
        "question": "소프트웨어 설계 시 구축된 플랫폼의 성능 특성 분석에 사용되는 측정 항목이 아닌 것은?",
        "correct_answer": "서버 튜닝(Server Tunning)",
        "incorrect_answers": [
            "응답시간(Response Time)",
            "가용성(Availability)",
            "사용률(Utilization)"
        ]
    },
    {
        "question": "자료 사전에서 자료의 생략을 의미하는 기호는?",
        "correct_answer": "()",
        "incorrect_answers": [
            "{}",
            "**",
            "="
        ]
    },
    {
        "question": "검토회의 전에 요구사항 명세서를 미리 배포하여 사전 검토한 후 짧은 검토 회의를 통해 오류를 조기에 검출하는 데 목적을 두는 요구사항 검토 방법은?",
        "correct_answer": "워크 스루",
        "incorrect_answers": [
            "빌드 검증",
            "동료 검토",
            "개발자 검토"
        ]
    },
    {
        "question": "CASE가 갖고 있는 주요 기능이 아닌 것은?",
        "correct_answer": "언어 번역",
        "incorrect_answers": [
            "그래픽 지원",
            "소프트웨어 생명주기 전 단계의 연결",
            "다양한 소프트웨어 개발 모형 지원"
        ]
    },
    {
        "question": "XP(eXtreme Programming)의 5가지 가치로 거리가 먼 것은?",
        "correct_answer": "정형 분석",
        "incorrect_answers": [
            "용기",
            "의사소틍",
            "피드백"
        ],
        "desc": "익스트림 프로그래밍(eXtreme Programming, XP)는 켄트 백 등이 제안한 소프트웨어 개발 방법이다 XP에는 용기(Courage), 단순성(Simplicity), 커뮤니케이션(Communication), 피드백(Feedback), 존중(Respect) 5가지 가치가 있다."
    },
    {
        "question": "DBMS 분석 시 고려사항으로 거리가 먼 것은?",
        "correct_answer": "네트워크 구성도",
        "incorrect_answers": [
            "가용성",
            "성능",
            "상호 호환성"
        ]
    },
    {
        "question": "HIPO(Hierachy Input Process Output)에 대해서 설명으로 거리가 먼 것은?",
        "correct_answer": "상향식 소프트웨어 개발을 위한 문서화 도구이다.",
        "incorrect_answers": [
            "HIPO 차트 종류에는 가시적 도표, 총체적 도표, 세부적 도표가 있다.",
            "기능과 자료의 의존 관계를 동시에 표현할 수 있다.",
            "보기 쉽고 이해하기 쉽다."
        ],
        "desc": "하향식 개발을 위한 시스템 설계 및 문서화 도구이다. 가시적 도표, 총체적 도표, 세부적 도표으로 구성되며 분석 및 설계 도구로 사용된다."
    },
    {
        "question": "UI 설계 원칙에서 누구나 쉽게 이해하고 사용할 수 있어야 한다는 것은?",
        "correct_answer": "직관성",
        "incorrect_answers": [
            "유효성",
            "무결성",
            "유연성"
        ],
        "desc": "UI 설계 원칙으로 직관성(intuitiveness), 일관성(Consistency), 효율성(Effectiveness)이 있다."
    },
    {
        "question": "럼바우(Rumbaugh)의 객체 지향 분석 절차를 가장 바르게 나열한 것은?",
        "correct_answer": "객체 모형 -> 동적 모형 -> 기능 모형",
        "incorrect_answers": [
            "객체 모형 -> 기능 모형 -> 동적 모형",
            "기능 모형 -> 동적 모형 -> 객체 모형",
            "기능 모형 -> 객체 모형 -> 동적 모형"
        ],
        "desc": "소프트웨어 구성 요소를 그래픽 표기법을 이용하여 모델링하는 객체지향 분석(Object-oriented Analysis) 기법이다."
    },
    {
        "question": "데이터 흐름도(DFD)의 구성 요소에 포함되지 않는 것은?",
        "correct_answer": "data dictionary",
        "incorrect_answers": [
            "process",
            "data flow",
            "data store"
        ],
        "desc": "자료흐름도(DFD)의 구성 요소에는 처리(Process), 자료흐름(Data Flow), 자료저장소(Data Store), 단말(Terminator) 등이 있다."
    },
    {
        "question": "데이터 흐름도(DFD)의 구성 요소에 포함되지 않는 것은?",
        "correct_answer": "<< >>",
        "incorrect_answers": [
            "(( ))",
            "{{ }}",
            "[[ ]]"
        ]
    },
    {
        "question": "트랜잭션이 올바르게 처리되고 있는지 데이터를 감시하고 제어하는 미들웨어는?",
        "correct_answer": "TP monitor",
        "incorrect_answers": [
            "RPC",
            "ORB",
            "HUB"
        ],
        "desc" : "트랜잭션은 데이터베이스(DB)에서의 상호작용의 단위(논리적 단위)이다. RPC : 원격 프로시저 호출 / ORB : 브로커를 통해 다른 컴퓨터의 프로그램 호출"
    },
    {
        "question": "소프트웨어 개발 방법 중 요구사항 분석(requirements analysis)과 거리가 먼 것은?",
        "correct_answer": "설계 명세서 작성",
        "incorrect_answers": [
            "비용과 일정에 대한 제약 설정",
            "타당성 조사",
            "요구사항 정의 문서화"
        ],
        "desc" : "요구사항 분석이 마무리되면 설계 단계가 시작되며, 설계가 마무리되면 명세서를 작성한다."
    },
    {
        "question": "공동 모듈에 대한 명세 기법 중 해당 기능에 대해 일관되게 이해되고 한 가지로 해석될 수 있도록 작성하는 원칙은?",
        "correct_answer": "명확성",
        "incorrect_answers": [
            "상호작용성",
            "독립성",
            "내용성"
        ],
        "desc" : "요구사항 분석이 마무리되면 설계 단계가 시작되며, 설계가 마무리되면 명세서를 작성한다."
    },
    {
        "question": "UML 모델에서 사용되는 Structural Diagram에 속하지 않는 것은?",
        "correct_answer": "Activity Diagram",
        "incorrect_answers": [
            "Class Diagram",
            "Object Diagram",
            "Component Diagram"
        ],
        "desc" : "구조적 다이어그램에는 클래스, 객체, 복합체, 배치, 컴포넌트, 패키지가 있습니다."
    }
    
]